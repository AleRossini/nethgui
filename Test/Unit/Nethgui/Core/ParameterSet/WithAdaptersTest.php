<?php
/**
 * @package Tests
 * @subpackage Unit
 */

/**
 * Test class for \Nethgui\Core\ParameterSet.
 * Generated by PHPUnit on 2011-03-24 at 15:56:58.
 * @package Tests
 * @subpackage Unit
 */
class \Nethgui\Core\ParameterSetWithAdaptersTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var \Nethgui\Core\ParameterSet
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new \Nethgui\Core\ParameterSet;

        $this->arrayAdapter = $this->getMockBuilder('\Nethgui\Adapter\ArrayAdapter')
            ->disableOriginalConstructor()
            ->getMock();

        $this->scalarAdapter = $this->getMockBuilder('\Nethgui\Adapter\ScalarAdapter')
            ->disableOriginalConstructor()
            ->getMock();

        $this->object->register($this->arrayAdapter, 'arrayAdapter');
        $this->object->register($this->scalarAdapter, 'scalarAdapter');
        $this->object['inner'] = $this->getMock('\Nethgui\Core\ParameterSet');
        $this->object['pi'] = 3.14;
    }

    public function testCount()
    {
        $this->assertEquals(4, $this->object->count());
    }

    public function testUserScalarAdapter()
    {
        $this->scalarAdapter->expects($this->once())
            ->method('set')
            ->with('VALUE');

        $this->object['scalarAdapter'] = 'VALUE';
    }

    public function testUseArrayAdapter()
    {
        $this->arrayAdapter->expects($this->once())
            ->method('offsetSet')
            ->with(1, 'NEW');

        $this->arrayAdapter->expects($this->exactly(2))
            ->method('get')
            ->will($this->returnValue($this->arrayAdapter));

        $this->arrayAdapter->expects($this->once())
            ->method('offsetGet')
            ->with(1)
            ->will($this->returnValue('VALUE'));


        $this->assertEquals('VALUE', $this->object['arrayAdapter'][1]);

        $this->object['arrayAdapter'][1] = 'NEW';
    }

    public function testSaveClean()
    {
        $this->arrayAdapter->expects($this->once())
            ->method('save');

        $this->scalarAdapter->expects($this->once())
            ->method('save');

        $this->object['inner']->expects($this->once())
            ->method('save');

        $this->assertEquals(0, $this->object->save());
    }

    public function testSaveDirty()
    {
        $this->arrayAdapter->expects($this->once())
            ->method('save')
            ->will($this->returnValue(1))
        ;

        $this->scalarAdapter->expects($this->once())
            ->method('save')
            ->will($this->returnValue(1))
        ;

        $this->object['inner']->expects($this->once())
            ->method('save')
            ->will($this->returnValue(3))
        ;

        $this->assertEquals(5, $this->object->save());
    }

}

?>
