<?php
/**
 * @package Tests
 * @subpackage Unit
 */

/**
 * Test class for Nethgui_Core_ConfigurationDatabase.
 * Generated by PHPUnit on 2011-03-04 at 09:43:03.
 * @package Tests
 * @subpackage Unit
 */
class Nethgui_Core_ConfigurationDatabaseTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Nethgui_Core_ConfigurationDatabase
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Nethgui_Core_ConfigurationDatabase('testdb', $this->getMock('Nethgui_Core_UserInterface'));
        $this->object->setPolicyDecisionPoint(new Nethgui_Authorization_PermissivePolicyDecisionPoint());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @todo Implement testSetPolicyDecisionPoint().
     */
    public function testSetPolicyDecisionPoint()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @depends testSetPolicyDecisionPoint
     */
    public function testGetPolicyDecisionPoint()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * Implement testGetAll().
     * @requires testSetKey
     */
    public function testGetAll()
    {
        $props = array("FirstProp" => "firstvalue", "SecondProp" => "2ndvalue");
        $this->object->setKey("testkey", "testService", $props);
        $tmp = $this->object->getAll("testService"); //getByType
        foreach ($tmp as $record) {
            foreach ($record as $key => $val) {
                if ($key == 'type')
                    $this->assertEquals("testService", $record['type']);
                else
                    $this->assertEquals($val, $props[$key]);
            }
        }

        $tmp = $this->object->getAll(false, "testk"); //getByName
        foreach ($tmp as $record) { //getByType
            foreach ($record as $key => $val) {
                if ($key == 'type')
                    $this->assertEquals("testService", $record['type']);
                else
                    $this->assertEquals($val, $props[$key]);
            }
        }

        $tmp = $this->object->getAll("testService", "testk"); //getByType && getByName
        foreach ($tmp as $record) { //getByType
            foreach ($record as $key => $val) {
                if ($key == 'type')
                    $this->assertEquals("testService", $record['type']);
                else
                    $this->assertEquals($val, $props[$key]);
            }
        }
    }

    /**
     * Implement testGetKey().
     * @requires testSetKey
     */
    public function testGetKey()
    {
        $props = array("FirstProp" => "firstvalue", "SecondProp" => "2ndvalue");
        $this->object->setKey("testkey", "service", $props);
        $tmp = $this->object->getKey("testkey");
        foreach ($tmp as $key => $val) {
            $this->assertEquals($val, $props[$key]);
        }
    }

    /**
     * Implement testSetKey().
     */
    public function testSetKey()
    {
        $props = array("FirstProp" => "firstvalue", "SecondProp" => "2ndvalue");
        $this->assertEquals(true, $this->object->setKey("testkey", "service", $props));
    }

    /**
     * Implement testDeleteKey()
     */
    public function testDeleteKey()
    {
        $this->assertEquals(true, $this->object->deleteKey("testkey"));
    }

    /**
     * Implement testGetKey()
     * @depends testSetKey
     */
    public function testGetType()
    {
        $props = array("FirstProp" => "firstvalue");
        $this->object->setKey("testkey", "service", $props);
        $this->assertEquals("service", $this->object->getType("testkey"));
    }

    /**
     * Implement testSetType()
     * @depends testGetType
     * @depends testSetKey
     */
    public function testSetType()
    {
        $props = array("FirstProp" => "firstvalue");
        $this->object->setKey("testkey", "service", $props);
        $this->object->setType("testkey", "service2");
        $this->assertEquals("service2", $this->object->getType("testkey"));
    }

    /**
     * Implement testGetProp()
     * @depends testSetKey
     */
    public function testGetProp()
    {
        $props = array("FirstProp" => "firstvalue");
        $this->object->setKey("testkey", "service", $props);
        $this->assertEquals("firstvalue", $this->object->getProp("testkey", "FirstProp"));
    }

    /**
     * Implement testSetProp()
     * @depends testGetProp
     * @depends testSetKey
     */
    public function testSetProp()
    {
        $props = array("FirstProp" => "firstvalue");
        $props2 = array("SecondProp" => "2ndvalue");
        $props3 = array("FirstProp" => "newvalue", "ThirdProp" => "3");
        $this->object->setKey("testkey", "service", $props);
        $this->object->setProp("testkey", $props2);
        $this->assertEquals("2ndvalue", $this->object->getProp("testkey", "SecondProp"));
        $this->object->setProp("testkey", $props3);
        $this->assertEquals("2ndvalue", $this->object->getProp("testkey", "SecondProp"), "Lost SecondProp");
        $this->assertEquals("newvalue", $this->object->getProp("testkey", "FirstProp"));
        $this->assertEquals("3", $this->object->getProp("testkey", "ThirdProp"));
    }

    /**
     * Implement testDelProp()
     * @depends testGetProp
     * @depends testGetKey
     */
    public function testDelProp()
    {
        $props = array("FirstProp" => "1", "SecondProp" => "2", "ThirdProp" => "3");
        $this->object->setKey("testkey", "service", $props);
        $this->object->delProp("testkey", array("SecondProp", "ThirdProp"));
        $this->assertEquals("", $this->object->getProp("testkey", "SecondProp"));
        $this->assertEquals("", $this->object->getProp("testkey", "ThirdProp"));
    }

}
