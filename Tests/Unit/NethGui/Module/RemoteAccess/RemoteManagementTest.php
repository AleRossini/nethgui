<?php

/**
 * Test class for NethGui_Module_RemoteAccess_RemoteManagement.
 * Generated by PHPUnit on 2011-03-16 at 15:53:04.
 */
class NethGui_Module_RemoteAccess_RemoteManagementTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var NethGui_Module_RemoteAccess_RemoteManagement
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new NethGui_Module_RemoteAccess_RemoteManagement;

        $configurationMock = $this->getMockBuilder('NethGui_Core_SMEHostConfiguration')
                //->setMethods(array('setProp'))
                ->getMock();

        $this->object->setHostConfiguration($configurationMock);

        $configurationMock
            ->expects($this->any())
            ->method('setDB')
            ->with($this->equalTo('configuration'))
            ->will($this->returnValue($configurationMock))
        ;

        $configurationMock
            ->expects($this->any())
            ->method('getProp')
            ->with('httpd-admin', 'ValidFrom')
            ->will($this->returnValue('192.168.1.0/255.255.255.0,192.168.1.2/255.255.255.0'))
        ;

        $configurationMock
            ->expects($this->any())
            ->method('setProp')
            ->withAnyParameters()
            ->will($this->returnValue(true));
        ;

        $configurationMock
            ->expects($this->any())
            ->method('delProp')
            ->withAnyParameters()
            ->will($this->returnValue(true));
        ;

        $this->object->initialize();

        $request = $this->getMockBuilder("NethGui_Core_Request")
                ->disableOriginalConstructor()
                ->getMock()
        ;

        $request->expects($this->any())
            ->method('hasParameter')
        ;

        $this->object->bind($request);

        $validationReport = $this->getMock('NethGui_Core_ValidationReport');

        $this->object->validate($validationReport);
    }

    public function testProcessRead()
    {
        $this->object->process();

        $response = $this->getMockBuilder('NethGui_Core_Response')
                ->disableOriginalConstructor()
                ->getMock();

        $response->expects($this->once())
            ->method('setData')
            ->with(
                $this->logicalAnd(
                    $this->arrayHasKey('networkAddress'),
                    $this->arrayHasKey('networkMask')
                )
            )
            ->will($this->returnCallback(array($this, 'requestSetData')))
        ;

        $this->object->prepareView($response);
    }

    /**
     * @todo testProcessWrite
     */
    public function testProcessWrite()
    {
        $this->markTestIncomplete();
    }

    /**
     * @todo testProcessDelete
     */
    public function testProcessDelete()
    {
        $this->markTestIncomplete();
    }

    public function requestSetData()
    {
        $args = func_get_args();

        $array = array_shift($args);

        $this->assertEquals('192.168.1.0', $array['networkAddress']);
        $this->assertEquals('255.255.255.0', $array['networkMask']);
    }

}

?>
